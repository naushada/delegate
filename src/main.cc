#ifndef __MAIN_CC__
#define __MAIN_CC__

#include "protocol_layer.h"
#include "middleware.h"

ACE_UINT8 loop_forever(void)
{
  ACE_Time_Value to(5);

  while(1)
  {
    ACE_Reactor::instance()->handle_events(to);
  }

  return(0);
}

int main(int count, char* param[])
{

#ifdef __UT__
  /*This is the hexdump of DISCOVER.*/
  uint8_t discover[] = {0x01,0x01,0x06,0x00,0xde,0x10,0xa7,0xe6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x75,0xa4,0x01,0x4d,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x82,0x53,0x63,0x35,0x01,0x01,0x3d,0x07,0x01,0xf8,0x75,0xa4,0x01,0x4d,0x47,0x0c,0x07,0x6d,0x6e,0x61,0x68,0x6d,0x65,0x64,0x3c,0x08,0x4d,0x53,0x46,0x54,0x20,0x35,0x2e,0x30,0x37,0x0e,0x01,0x03,0x06,0x0f,0x1f,0x21,0x2b,0x2c,0x2e,0x2f,0x77,0x79,0xf9,0xfc,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

  uint8_t req[] = {0x01,0x01,0x06,0x00,0xde,0x10,0xa7,0xe6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x75,0xa4,0x01,0x4d,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x82,0x53,0x63,0x35,0x01,0x03,0x3d,0x07,0x01,0xf8,0x75,0xa4,0x01,0x4d,0x47,0x32,0x04,0x0a,0x14,0x00,0x02,0x36,0x04,0x0a,0x14,0x00,0x01,0x0c,0x07,0x6d,0x6e,0x61,0x68,0x6d,0x65,0x64,0x51,0x0a,0x00,0x00,0x00,0x6d,0x6e,0x61,0x68,0x6d,0x65,0x64,0x3c,0x08,0x4d,0x53,0x46,0x54,0x20,0x35,0x2e,0x30,0x37,0x0e,0x01,0x03,0x06,0x0f,0x1f,0x21,0x2b,0x2c,0x2e,0x2f,0x77,0x79,0xf9,0xfc,0xff};

  mna::dhcp::dhcp_t* pReq = (mna::dhcp::dhcp_t *)discover;

  mna::dhcp::server _s;
  mna::transport::udp _udp;
  mna::ipv4::ip _ip;
  mna::eth::ether _et("enp0s9");

  _et.set_upstream(mna::ipv4::ip::upstream_t::from(_ip, &mna::ipv4::ip::rx));
  _ip.set_upstream(mna::transport::udp::upstream_t::from(_udp, &mna::transport::udp::rx));
  _udp.set_upstream(mna::dhcp::server::upstream_t::from(_s, &mna::dhcp::server::rx));

  _et.rx(discover, sizeof(discover));
  pReq = (mna::dhcp::dhcp_t*)req;
  _et.rx(req, sizeof(req));

  mna::middleware mw("enp0s9");
  mw.set_rx_dispatch(mw.eth().get_upstream());
  mw.set_timer_dispatch(mna::middleware::timer_delegate_t::from(mw.dhcp(), &mna::dhcp::server::timedOut));


  //mw.set_rx_dispatch(mw.eth().get_upstream());
  const uint8_t et[] = {0xf8,0x75,0xa4,0x01,0x4d,0x47,0x08,0x00,0x27,0x03,0x40,0x9f,0x08,0x00,0x45,0x00,0x01,0x3f,0x00,0x00,0x40,0x00,0x10,0x11,0x5f,0x9a,0x0a,0x14,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x44,0x00,0x43,0x01,0x2b,0x00,0x00,0x02,0x01,0x06,0x05,0x68,0x25,0x4b,0x87,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x14,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x75,0xa4,0x01,0x4d,0x47,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x61,0x64,0x61,0x6d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x63,0x82,0x53,0x63,0x35,0x01,0x02,0x01,0x04,0xff,0xff,0x00,0x00,0x03,0x04,0x0a,0x14,0x00,0x01,0x06,0x04,0x08,0x08,0x04,0x04,0x0f,0x0b,0x62,0x61,0x6c,0x61,0x61,0x67,0x68,0x2e,0x6e,0x65,0x74,0x33,0x04,0x00,0x01,0x51,0x80,0x1a,0x02,0x00,0xdc,0x36,0x04,0x0a,0x14,0x00,0x01,0xff};
  mw.rx(et, sizeof(et));
#endif /*__UT__*/


  /*Config processing*/
  std::string sName("/home/mnahmed/ilm/schema/vdhcp");
  std::unique_ptr<mna::dhcp::serverConfig> cfg = std::make_unique<mna::dhcp::serverConfig>(sName);

  cfg->fillIPPool(cfg->startIP(), cfg->endIP(), cfg->mask());

  /*vddns-config*/
  std::string vddns_name("/home/mnahmed/ilm/schema/vddns");
  std::unique_ptr<mna::ddns::config> vddns_config = std::make_unique<mna::ddns::config>(vddns_name);
  mna::ddns::client vddns_client;
  vddns_client.set_config(std::move(vddns_config));

  /* creating the instance now*/
  mna::tcp::client tcp_transport(vddns_client.get_config().peer().front().domainName(),
                                 vddns_client.get_config().peer().front().peerPort(),
                                 vddns_client.get_config().instance().bindAddress(), 8080);

  tcp_transport.set_rx(mna::ddns::client::receive_t::from(vddns_client, &mna::ddns::client::on_receive));
  vddns_client.set_tx(mna::ddns::client::send_t::from(tcp_transport, &mna::tcp::client::to_send));
  vddns_client.set_connect(mna::ddns::client::connect_t::from(tcp_transport, &mna::tcp::client::to_connect));

  std::string req;
  vddns_client.buildWanIPRequest(req);
  std::cout << "WanIPRequest is - " << req.c_str() << std::endl;

  for_each(vddns_client.get_config().peer().begin(), vddns_client.get_config().peer().end(), [&](mna::ddns::vddnsPeer& peer) {
    std::string userPwd;
    size_t outLen = 0 ;
    userPwd.clear();
    userPwd = peer.userId();
    userPwd += ":" + peer.password();
    ACE_Byte* enc = ACE_Base64::encode((ACE_Byte*)userPwd.c_str(), userPwd.length(), &outLen, false);
    std::string b64((const char *)enc, outLen);
    ACE_OS::free(enc);

    vddns_client.buildWanIPUpdateRequest(req, peer, b64);
    std::cout << "WanIPUpdateRequest is - " << req.c_str() << std::endl;
    vddns_client.get_connect()();
    vddns_client.get_tx()((uint8_t *)req.c_str(), (ssize_t)req.length());
  });

  mna::tcp::server tcp_server(vddns_client.get_config().instance().bindAddress(), 8080, mna::ddns::client::receive_t::from(vddns_client, &mna::ddns::client::on_receive));

  //tcp_server.set_rx(mna::ddns::client::receive_t::from(vddns_client, &mna::ddns::client::on_receive));
  mna::middleware mw(cfg->port());
  std::unique_ptr<mna::dns::server> dns_server = std::make_unique<mna::dns::server>(cfg->domainName(), cfg->ip());
  mw.dns(std::move(dns_server));
  mw.dhcp().set_config(std::move(cfg));

  ACE_Reactor::instance()->register_handler(&mw, ACE_Event_Handler::READ_MASK);

  loop_forever();

  return(0);
}


#endif /*__MAIN_CC__*/
